# -*- coding: utf-8 -*-
"""
/***************************************************************************
 InfoArbre
                                 A QGIS plugin
 obtenir des informations sur les arbres
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by martine.besse/heig-vd
        email                : martine.besse@heig-vd.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .InfoArbre_dialog import InfoArbreDialog
import os.path

from qgis.utils import *

#position de votre dossier QGis. A CHANGER:
chemin_dossierQGis= 'D:\\Documents\\HEIG-VD\\COURS-S4\\SIG4\\QGis_gestion_arbres\\'
#--------------------------------------------------------------------------------------------
#DATABASE
#requêtes sur la database
import psycopg2
#connection à changer selon user et password
conn = psycopg2.connect("dbname=gestion_arbres user=postgres password=postgres")

#!/usr/bin/python
def connect(sql):
    """ Connect to the PostgreSQL database server """
    conn = None
    try:
        # connect to the PostgreSQL server
        #print('Connecting to the PostgreSQL database...')
        conn = psycopg2.connect("dbname=gestion_arbres user=postgres password=postgres")
		
        # create a cursor
        cur = conn.cursor()

    #execute a query
        cur.execute(sql)
        result = cur.fetchall()
        #print(result)
        
	# close the communication with the PostgreSQL
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
            #print('Database connection closed.')
    
    return result

#--------------------------------------------------------------------------------------------
#construction du plugin
class InfoArbre:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'InfoArbre_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&InfoArbre')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('InfoArbre', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/InfoArbre/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'InfoArbre'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&InfoArbre'),
                action)
            self.iface.removeToolBarIcon(action)


    # fonction qui crée des listes d'attribut avec les features sélectionnées
    def findSelectedFeature(self):
        print("Fonction findSelectedFeature is running.")
        
        #initialisation liste des résultats
        list_res_intervention=[]
        list_res_arbre=[]
        
        #couche active
        layer = iface.activeLayer()
        #print("layer active: " + layer.name())
        
        #vérification que l'on a la bonne couche active.
        if layer.name() == "martigny_centre":
            
            #récupération des features selectionnees:
            #vérification qu'il n'y a qu'une entité de sélectionnée.
            nbr_features = layer.selectedFeatureCount()
            if nbr_features == 1:
                
                #récupérer id feature sélectionnée
                selection = layer.selectedFeatures()
                for feature in selection:
                    id_arbre=feature['gid']

                #récupérer données sur l'arbre:
                    
                    #sql pour récupérer essence arbre
                    sql_essence = 'SELECT nom_vernaculaire FROM essence_arbres INNER JOIN martigny_centre ON essence_arbres.id = martigny_centre.essence WHERE gid ='+str(id_arbre)
                    resultat = connect(sql_essence)
                    essence = resultat[0][0].split(' ')[0]
                    list_res_arbre=[feature['gid'],essence,feature['date_plantation'].toString(),feature['hauteur'],feature['diametre'],feature['arbre_remarquable'],feature['etat_sanitaire'],feature['image']]
                    
                #récupérer interventions de l'arbre:

                    #requête sql pour récupérer données interventions liées à l'arbre.
                    sql_intervention = 'SELECT * FROM intervention INNER JOIN arbre_intervention ON intervention.id = arbre_intervention.id_intervention WHERE id_arbre='+str(id_arbre)
                    resultat = connect(sql_intervention)
                    
                    #récupération nombre d'interventions
                    nombre_dintervention=len(resultat)
                    
                    #erreur console pour aider l'utilisateur
                    if nombre_dintervention < 1:
                        self.dlg.erreur_console.setText("Pas d'intervention pour cette arbre.")
                    
                    #initialisation de l'indentation/index
                    i = 0
                    #parcours des interventions
                    while i < nombre_dintervention:
                        id_intervention=str(resultat[i][0])
                        date_entree=resultat[i][1].strftime("%d %b, %Y")
                        date_intervention=resultat[i][2].strftime("%d %b, %Y")
                        status=resultat[i][3].strip()
                        description=resultat[i][4].strip()
                        responsable=resultat[i][5].strip()

                        #ajout dans liste des résultats
                        list_res_intervention.append([str(i), id_intervention, date_entree, date_intervention, status, description, responsable])
                        
                        #identation/index
                        i+=1
                    
            else:
                print("Aucune ou trop d entités sélectionnées. Veuillez sélectionner seulement une entité.")
                #erreur dans la console:
                self.dlg.erreur_console.setText("Aucune ou trop d'entités sélectionnées. Veuillez sélectionner seulement une entité.")
                
        else:
            print("Martigny_centre pas sélectionnée.")
            self.dlg.erreur_console.setText("Martigny_centre pas sélectionnée.")
        
        return list_res_arbre, list_res_intervention
            
    #fonction qui remplit le dialog arbre avec les attributs
    def showSelectedFeature(self, liste1):
        print("Fonction showSelectedFeature is running.")
        self.dlg.gid.setText(str(liste1[0]))
        self.dlg.essence.setText(str(liste1[1]))
        self.dlg.date_plantation.setText(str(liste1[2]))
        self.dlg.hauteur.setText(str(liste1[3]))
        self.dlg.diametre.setText(str(liste1[4]))
        self.dlg.arbre_remarquable.setText(str(liste1[5]))
        self.dlg.etat_sanitaire.setText(str(liste1[6]))
        
        if liste1[7]:
            chemin_image=chemin_dossierQGis+liste1[7]
            pixmap = QPixmap(chemin_image)
            self.dlg.label_image.setPixmap(pixmap)
        
    #fonction qui remplit le menu déroulant du dialog avec les id interventions
    def findIntervention(self, liste2):
        print("Fonction findIntervention is running.")
        for intervention in liste2:
            self.dlg.ComboBox_intervention.addItem(intervention[1])
    
    
    #fonction qui affiche les données de l'intervention sélectionnée dans la liste déroulante
    def showIntervention(self):
        print("Fonction showIntervention is running.")
        index = self.dlg.ComboBox_intervention.currentIndex()
        
        #récupération des résultat. #pas optimisé, réexécute la même fonction
        liste1, liste2 = self.findSelectedFeature()
        if len(liste2)>0:
            intervention = liste2[index]
            self.dlg.label_11_intervention.setText(intervention[2]) #date
            self.dlg.label_11_intervention_2.setText(intervention[3]) #date
            self.dlg.label_11_intervention_3.setText(intervention[4]) #status
            self.dlg.label_11_intervention_4.setText(intervention[5]) #description
            self.dlg.label_11_intervention_5.setText(intervention[6]) #responsable
        
        
    #fonction pour nettoyer les résultats.
    def nettoyage(self):
        self.dlg.erreur_console.setText("") 
        self.dlg.ComboBox_intervention.clear()
        
        #fonction showSelectedFeature
        self.dlg.gid.setText("")
        self.dlg.essence.setText("")
        self.dlg.date_plantation.setText("")
        self.dlg.hauteur.setText("")
        self.dlg.diametre.setText("")
        self.dlg.arbre_remarquable.setText("")
        self.dlg.etat_sanitaire.setText("")
        self.dlg.label_image.clear()

        #fonction showIntervention
        self.dlg.label_11_intervention.setText("")
        self.dlg.label_11_intervention_2.setText("")
        self.dlg.label_11_intervention_3.setText("")
        self.dlg.label_11_intervention_4.setText("")
        self.dlg.label_11_intervention_5.setText("")
    
    #fonction principal qui gère l'aspect général du dialog et appelle les autres fonctions.
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = InfoArbreDialog()
            
            #connection au bouton intervention
            self.dlg.pushButton_intervention.clicked.connect(self.showIntervention)

        #on efface tous les résultats:
        self.nettoyage()
        
    #appel des fonctions. Important qu'il soit avant le show dialog.
        
        #récupération de la feature sélectionnée et création de listes
        liste1, liste2 = self.findSelectedFeature()
        
        #pour pas qu'il plante s'il n'y a pas le bon nombre de feature selectionnee.
        if len(liste1) > 0:
            #remplir les cases de la feature.
            self.showSelectedFeature(liste1)
            
            #remplir les cases concernant l'intervention
            self.findIntervention(liste2)
        
        # show the dialog
        self.dlg.show()
        
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            print("Ok: fonction run is running.")
            
            pass
            